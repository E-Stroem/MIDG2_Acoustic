
kernel void AcousticSurfaceKernel3D(const int K,
				    const int    *g_mapinfo,
				    const float  *g_surfinfo,
				    const float4 *g_LIFT,
				    const float  *g_Q,
				    const float  *g_partQ,
				    float  *g_rhsQ){
  /* [EA] Defining constants for acoustic equations*/
	const float rho = 1.2;
	const float c_Acoustic = 343.0;
  const float acousticConst = rho*c_Acoustic*c_Acoustic; // rho*c^2
  for(int k=0;k<K;++k;outer0){

    shared float s_fluxQ[p_Nfields*p_Nfp*p_Nfaces];
    
    for(int n=0;n<p_max_NfpNfaces_Np;++n;inner0){

      /* grab surface nodes and store flux in shared memory */
      if(n< (p_Nfp*p_Nfaces) ){
	/* coalesced reads (maybe) */
	int m =  2*(k*p_Nfp*p_Nfaces)+n;

	const  int idM   = g_mapinfo[m]; m += p_Nfp*p_Nfaces; 
	int idP   = g_mapinfo[m]; 

	m =  5*(k*p_Nfp*p_Nfaces)+n;

	const  float Fsc = g_surfinfo[m]; m += p_Nfp*p_Nfaces;
	float Bsc = g_surfinfo[m]; m += p_Nfp*p_Nfaces;
	const  float nx  = g_surfinfo[m]; m += p_Nfp*p_Nfaces;
	const  float ny  = g_surfinfo[m]; m += p_Nfp*p_Nfaces;
	const  float nz  = g_surfinfo[m];

	/* [EA] Field differences, Fsc and Bsc*/
	/* check if idP<0  */
	float dvelX, dvelY, dvelZ, dpres;
	if(idP<0){
		/* [EA] Only enters here if nprocs > 1 and interface point u^+ is on another proc*/
	  idP = p_Nfields*(-1-idP);
	  
	  dvelX = Fsc*(-g_partQ[idP+0] + g_Q[idM+0*BSIZE]);
	  dvelY = Fsc*(-g_partQ[idP+1] + g_Q[idM+1*BSIZE]);
	  dvelZ = Fsc*(-g_partQ[idP+2] + g_Q[idM+2*BSIZE]);
	  
	  dpres = Fsc*(-g_partQ[idP+3] + g_Q[idM+3*BSIZE]);
		
	}
	else{
		/* [EA] Field differences (Bsc = 1), and perfectly reflecting boundary conditions (Bsc = -1)*/
	  dvelX = Fsc*(-Bsc*g_Q[idP+0*BSIZE] + g_Q[idM+0*BSIZE]);
	  dvelY = Fsc*(-Bsc*g_Q[idP+1*BSIZE] + g_Q[idM+1*BSIZE]);
	  dvelZ = Fsc*(-Bsc*g_Q[idP+2*BSIZE] + g_Q[idM+2*BSIZE]);
	  dpres = Fsc*(-g_Q[idP+3*BSIZE] + g_Q[idM+3*BSIZE]);
	}
	
	/* [EA] Compute central fluxes*/
	m = n;
	s_fluxQ[m] = nx*dpres*0.5; m += p_Nfp*p_Nfaces;
	s_fluxQ[m] = ny*dpres*0.5; m += p_Nfp*p_Nfaces;
	s_fluxQ[m] = nz*dpres*0.5; m += p_Nfp*p_Nfaces;
	s_fluxQ[m] = (nx*dvelX + ny*dvelY + nz*dvelZ)*0.5;
	    }
    }
    
    /* make sure all element data points are cached */
    barrier(localMemFence);
    
    for(int n=0;n<p_max_NfpNfaces_Np;++n;inner0){
      
      if(n< (p_Np))
	{
	  float rhsvelX = 0, rhsvelY = 0, rhsvelZ = 0;
	  float rhspres = 0;
	  
	  int sk = n, m;
		/* [EA] Multiply fluxes with LIFT*/
	  /* can manually unroll to 4 because there are 4 faces */
	  for(m=0;p_Nfaces*p_Nfp-m;){
	    const float4 L = g_LIFT[sk];
	    sk+=p_Np;
	    
	    /* broadcast */
	    int sk1 = m;
	    rhsvelX += L.x*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelY += L.x*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelZ += L.x*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhspres += L.x*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    ++m;
	    
	    /* broadcast */
	    sk1 = m;
	    rhsvelX += L.y*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelY += L.y*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelZ += L.y*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhspres += L.y*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;

	    ++m;
	    
	    /* broadcast */
	    sk1 = m;
	    rhsvelX += L.z*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelY += L.z*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelZ += L.z*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhspres += L.z*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    ++m;
	    
	    /* broadcast */
	    sk1 = m;
	    rhsvelX += L.w*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelY += L.w*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhsvelZ += L.w*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    rhspres += L.w*s_fluxQ[sk1]; sk1 += p_Nfp*p_Nfaces;
	    ++m;
	    
	  }
	  /* [EA] Compute final rhs*/
	  m = n+p_Nfields*k*BSIZE;
	  g_rhsQ[m] += rhsvelX; g_rhsQ[m] /= rho; m += BSIZE;
	  g_rhsQ[m] += rhsvelY; g_rhsQ[m] /= rho; m += BSIZE;
	  g_rhsQ[m] += rhsvelZ; g_rhsQ[m] /= rho; m += BSIZE;
	  g_rhsQ[m] += rhspres; g_rhsQ[m] *= acousticConst; m += BSIZE;

	}
    }
  }
}

